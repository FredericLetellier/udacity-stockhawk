package com.sam_chordas.android.stockhawk.ui;

import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.widget.TextView;

import com.sam_chordas.android.stockhawk.R;
import com.sam_chordas.android.stockhawk.data.HistoricalQuotationColumns;
import com.sam_chordas.android.stockhawk.data.QuoteProvider;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * udacity-stockhawk
 * Created on 02/09/2016 by Espace de travail.
 */
public class MyStockDetailActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor>{

    public static final String ARG_STOCK_SYMBOL = "stock_symbol";
    private static final int CURSOR_LOADER_ID = 0;

    private String stockSymbol;
    private LineChartView mLineChart;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_line_graph);

        stockSymbol = getIntent().getExtras().getString(ARG_STOCK_SYMBOL);
        mLineChart = (LineChartView) findViewById(R.id.chart);

        TextView tvSymbol = (TextView) findViewById(R.id.tv_symbol);
        tvSymbol.setText(stockSymbol);

        getLoaderManager().initLoader(CURSOR_LOADER_ID, null, this);

    }

    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        String[] projection = new String[]{
                HistoricalQuotationColumns._ID,
                HistoricalQuotationColumns.SYMBOL,
                HistoricalQuotationColumns.DATE,
                HistoricalQuotationColumns.OPENPRICE};

        String selection = HistoricalQuotationColumns.SYMBOL + " = ?";

        String[] selectionArgs = new String[]{stockSymbol};

        String sortOrder = HistoricalQuotationColumns.DATE + " ASC";

        return new CursorLoader(this,
                QuoteProvider.HistoricalQuotation.CONTENT_URI,
                projection,
                selection,
                selectionArgs,
                sortOrder);
    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {

        int x = 0;

        if (data.moveToFirst()){

            List<AxisValue> axisValuesX = new ArrayList<>();
            List<PointValue> pointValues = new ArrayList<>();

            // Add point
            do {
                String date = data.getString(data.getColumnIndex(HistoricalQuotationColumns.DATE));
                String sPrice = data.getString(data.getColumnIndex(HistoricalQuotationColumns.OPENPRICE));
                Float fPrice = Float.valueOf(sPrice);

                PointValue pointValue = new PointValue(x, fPrice);
                pointValues.add(pointValue);

                if (x == (data.getCount() / 3) || x == (data.getCount() / 3 * 2)) {
                    AxisValue axisValueX = new AxisValue(x);
                    axisValueX.setLabel(date);
                    axisValuesX.add(axisValueX);
                }

                x++;
            } while (data.moveToNext());

            // Draw Line
            Line line = new Line(pointValues).setColor(Color.WHITE).setCubic(false);
            List<Line> lines = new ArrayList<>();
            lines.add(line);

            LineChartData lineChartData = new LineChartData();
            lineChartData.setLines(lines);

            // Define x-axis
            Axis axisX = new Axis(axisValuesX);
            axisX.setHasLines(true);
            axisX.setMaxLabelChars(4);
            lineChartData.setAxisXBottom(axisX);

            // Define y-axis
            Axis axisY = new Axis();
            axisY.setAutoGenerated(true);
            axisY.setHasLines(true);
            axisY.setMaxLabelChars(4);
            lineChartData.setAxisYLeft(axisY);

            // Update chart with data
            mLineChart.setInteractive(false);
            mLineChart.setLineChartData(lineChartData);
        }
    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {

    }
}
